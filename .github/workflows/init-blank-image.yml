name: Init Blank Scratch Image

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/init-blank-image.yml"

concurrency:
  group: ${{ github.repository }}-global-lock
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.event.repository.name }}
  IMAGE_DESC: "Blank image based on scratch"

jobs:
  check-package:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Get owner type
        id: owner_type
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          owner_type=$(gh api repos/${{ github.repository }} --jq .owner.type)
          echo "type=$(echo $owner_type | tr '[:upper:]' '[:lower:]')s" >> $GITHUB_OUTPUT
      - name: Check if package exists and is private
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          PACKAGE_NAME: ${{ github.event.repository.name }}
        run: |
          response=$(gh api -H "Accept: application/vnd.github+json" "/${{ steps.owner_type.outputs.type }}/$OWNER/packages/container/$PACKAGE_NAME" --jq '.visibility' 2>/dev/null || echo "not_found")
          if [[ "$response" == "private" ]]; then
            echo "Package '${{ env.PACKAGE_NAME }}' exists and is private. Skipping."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Package '${{ env.PACKAGE_NAME }}' does not exist or is not private. Proceeding."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-metadata:
    needs: check-package
    if: needs.check-package.outputs.exists == 'false' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'create' && github.event.ref_type == 'branch' && github.event.ref == github.event.repository.default_branch) || github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=init
            type=sha,format=short
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}



  build-and-push:
    needs: build-metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create ephemeral Dockerfile
        run: |
          cat > Dockerfile.temp << 'EOF'
          FROM scratch
          COPY README.md /
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.temp
          push: true
          tags: ${{ needs.build-metadata.outputs.tags }}
          labels: ${{ needs.build-metadata.outputs.labels }}
          platforms: linux/amd64

      - name: Set package visibility to private
        if: github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Setting visibility of package '${{ env.IMAGE_NAME }}' to private..."
          owner_type=$(gh api repos/${{ github.repository }} --jq .owner.type | tr '[:upper:]' '[:lower:]')s
          ATTEMPTS=5
          DELAY=5
          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempting to set package visibility (attempt $i)..."
            if gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              "/${owner_type}/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}" \
              -f visibility='private'; then
              echo "Package visibility successfully set to private."
              exit 0
            fi
            if [ "$i" -lt "$ATTEMPTS" ]; then
              echo "Attempt $i failed. Retrying in $DELAY seconds..."
              sleep $DELAY
            else
              echo "Final attempt failed. Unable to set package visibility."
              exit 1
            fi
          done 